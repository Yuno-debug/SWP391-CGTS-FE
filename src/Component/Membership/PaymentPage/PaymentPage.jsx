import React, { useState, useEffect } from "react";
import axios from "axios";
import "./PaymentPage.css";

const API_PACKAGE_URL = import.meta.env.VITE_API_PACKAGE_URL || "http://localhost:5200/api/MembershipPackage";
const API_MEMBERSHIP_URL = import.meta.env.VITE_API_MEMBERSHIP_URL || "http://localhost:5200/api/UserMembership/create";
const API_PAYMENT_URL = import.meta.env.VITE_API_PAYMENT_URL || "http://localhost:5200/api/Payment";
const API_VNPAY_URL = import.meta.env.VITE_API_VNPAY_URL || "http://localhost:5200/api/VNPay/CreatePaymentUrl";

// H√†m l·∫•y userId t·ª´ localStorage n·∫øu c√≥
const getUserId = () => {
  try {
    const user = JSON.parse(localStorage.getItem('user'));
    return user?.userId || 1; // Tr·∫£ v·ªÅ 1 n·∫øu kh√¥ng c√≥ userId
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y userId t·ª´ localStorage:", error);
    return 1; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
  }
};

const PaymentPage = () => {
  const [packages, setPackages] = useState([]);
  const [loadingPackage, setLoadingPackage] = useState(null);
  const [error, setError] = useState(null);
  const userId = getUserId();

  // Fetch danh s√°ch g√≥i th√†nh vi√™n khi component mount
  useEffect(() => {
    const fetchPackages = async () => {
      try {
        console.log("üì• Fetching package list...");
        const response = await axios.get(API_PACKAGE_URL);
        setPackages(response.data);
        console.log("‚úÖ Packages loaded:", response.data);
      } catch (error) {
        console.error("‚ùå L·ªói t·∫£i danh s√°ch g√≥i:", error);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch g√≥i, vui l√≤ng th·ª≠ l·∫°i!");
      }
    };

    fetchPackages();
  }, []);

  // X·ª≠ l√Ω khi ch·ªçn g√≥i
  const handleSelectPackage = async (packageId) => {
    if (!packageId) {
      console.error("‚ö†Ô∏è packageId kh√¥ng h·ª£p l·ªá:", packageId);
      setError("L·ªói: packageId kh√¥ng h·ª£p l·ªá!");
      return;
    }

    setLoadingPackage(packageId);
    setError(null);

    try {
      console.log(`üîπ B∆∞·ªõc 1: T·∫°o Membership cho userId: ${userId}, packageId: ${packageId}`);

      // 1Ô∏è‚É£ T·∫°o Membership
      const membershipResponse = await axios.post(API_MEMBERSHIP_URL, {
        userId: userId,
        packageId: packageId
      });

      if (!membershipResponse.data || !membershipResponse.data.membershipId) {
        throw new Error("Kh√¥ng th·ªÉ t·∫°o Membership.");
      }
      
      const membershipId = membershipResponse.data.membershipId;
      console.log("‚úÖ Membership ID nh·∫≠n ƒë∆∞·ª£c:", membershipId);

      // 2Ô∏è‚É£ T·∫°o Payment t·ª´ MembershipId
      console.log(`üîπ B∆∞·ªõc 2: T·∫°o Payment cho MembershipId: ${membershipId}`);
      const paymentResponse = await axios.post(`${API_PAYMENT_URL}/${membershipId}`);

      if (!paymentResponse.data || !paymentResponse.data.paymentId) {
        throw new Error("Kh√¥ng th·ªÉ t·∫°o Payment.");
      }

      const paymentId = paymentResponse.data.paymentId;
      console.log("‚úÖ Payment ID nh·∫≠n ƒë∆∞·ª£c:", paymentId);

      // 3Ô∏è‚É£ L·∫•y URL thanh to√°n VNPay t·ª´ PaymentId
      console.log(`üîπ B∆∞·ªõc 3: L·∫•y VNPay URL cho PaymentId: ${paymentId}`);
      console.log("üîÑ S·∫Ω th·ª≠ v·ªõi nhi·ªÅu paymentId kh√°c nhau (actual, 1, 2)");
      
      // Danh s√°ch c√°c paymentId ƒë·ªÉ th·ª≠
      const paymentIds = [paymentId, 1, 2];
      let succeeded = false;
      
      for (const id of paymentIds) {
        if (succeeded) break;
        
        console.log(`üîÑ Th·ª≠ v·ªõi paymentId=${id}...`);
        
        // Th·ª≠ ph∆∞∆°ng th·ª©c POST tr∆∞·ªõc
        try {
          console.log(`üîÑ Th·ª≠ ph∆∞∆°ng th·ª©c POST v·ªõi paymentId=${id}...`);
          const postResponse = await axios.post(API_VNPAY_URL, {
            paymentId: id,
            method: 'vnpay'
          });
          
          if (postResponse.data) {
            const paymentUrl = postResponse.data.paymentUrl || postResponse.data;
            console.log(`‚úÖ URL thanh to√°n nh·∫≠n ƒë∆∞·ª£c (POST, paymentId=${id}):`, paymentUrl);
            
            if (typeof paymentUrl === 'string' && (paymentUrl.startsWith('http://') || paymentUrl.startsWith('https://'))) {
              window.location.href = paymentUrl;
              succeeded = true;
              break;
            } else {
              console.warn("‚ö†Ô∏è Received payment URL is not valid:", paymentUrl);
            }
          }
        } catch (postError) {
          console.error(`‚ùå POST method failed with paymentId=${id}:`, postError);
          
          // Th·ª≠ ph∆∞∆°ng th·ª©c GET n·∫øu POST th·∫•t b·∫°i
          try {
            console.log(`üîÑ Th·ª≠ ph∆∞∆°ng th·ª©c GET v·ªõi paymentId=${id}...`);
            const getResponse = await axios.get(`${API_VNPAY_URL}?paymentId=${id}&method=vnpay`);
            
            if (getResponse.data) {
              const paymentUrl = getResponse.data.paymentUrl || getResponse.data;
              console.log(`‚úÖ URL thanh to√°n nh·∫≠n ƒë∆∞·ª£c (GET, paymentId=${id}):`, paymentUrl);
              
              if (typeof paymentUrl === 'string' && (paymentUrl.startsWith('http://') || paymentUrl.startsWith('https://'))) {
                window.location.href = paymentUrl;
                succeeded = true;
                break;
              } else {
                console.warn("‚ö†Ô∏è Received payment URL is not valid:", paymentUrl);
              }
            }
          } catch (getError) {
            console.error(`‚ùå GET method failed with paymentId=${id}:`, getError);
          }
        }
      }
      
      if (!succeeded) {
        throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c·ªïng thanh to√°n sau khi th·ª≠ t·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c.");
      }
    } catch (error) {
      console.error("‚ùå L·ªói thanh to√°n:", error.response?.data || error.message);
      
      // Chi ti·∫øt l·ªói
      if (error.response) {
        console.error("‚ùå Response data:", error.response.data);
        console.error("‚ùå Response status:", error.response.status);
        console.error("‚ùå Response headers:", error.response.headers);
        setError(error.response.data?.message || `L·ªói ${error.response.status}: Thanh to√°n th·∫•t b·∫°i!`);
      } else if (error.request) {
        console.error("‚ùå Request made but no response:", error.request);
        setError("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
      } else {
        console.error("‚ùå Error message:", error.message);
        setError(error.message || "Thanh to√°n th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } finally {
      setLoadingPackage(null);
    }
  };

  return (
    <div className="payment-page">
      <h1>Choose Your Package</h1>

      {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói */}
      {error && <p className="error-message">{error}</p>}

      <div className="package-options">
        {packages.length === 0 ? (
          <p>ƒêang t·∫£i danh s√°ch g√≥i...</p>
        ) : (
          packages.map((pkg) => (
            <div key={pkg.packageId} className={`package ${pkg.packageName?.toLowerCase() || ""}`}>
              <h2>{pkg.packageName} Package</h2>
              <p>${pkg.price}/month</p>
              <button
                onClick={() => handleSelectPackage(pkg.packageId)}
                disabled={loadingPackage === pkg.packageId}
                className={loadingPackage === pkg.packageId ? "disabled" : ""}
              >
                {loadingPackage === pkg.packageId ? "Processing..." : `Select ${pkg.packageName}`}
              </button>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default PaymentPage;